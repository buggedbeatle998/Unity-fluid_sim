// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel calc_pos
#pragma kernel calc_dens


uint num_particles;
float smoothing_rad;
float delta_time;
bool orig;
float smooth_scale;
float look_ahead;
float3 bounds;

RWStructuredBuffer<float3> positions;
RWStructuredBuffer<float3> velocities;
RWBuffer<float> masses;
RWBuffer<float> densities;
RWStructuredBuffer<float3> pred_pos;
RWBuffer<uint> part_map;
RWBuffer<uint> keys;
RWBuffer<uint> start_i;


uint hash(uint x, uint y, uint z, uint table_size);
uint mod(uint num, uint denom);
float add_dens(uint x, uint y, uint z, float rad_sqr, uint index);


[numthreads(1024, 1, 1)]
void calc_pos(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= num_particles) {
        return;
    }
    
    float3 pos = positions[id.x] + velocities[id.x] * look_ahead;
    pred_pos[id.x] = pos;
    part_map[id.x] = id.x;
    keys[id.x] = hash((uint)pos.x / smoothing_rad,
                      (uint)pos.y / smoothing_rad,
                      (uint)pos.z / smoothing_rad,
                      num_particles);
    start_i[id.x] = num_particles;
}


uint hash(uint x, uint y, uint z, uint table_size) {
    const uint xhash = 73856093;
    const uint yhash = 19349663;
    const uint zhash = 83492791;
    return mod((x * xhash) ^ (y * yhash) ^ (z * zhash), table_size);
}


uint mod(uint num, uint denom) {
    return num - ((uint)num / denom) * denom;
}


float smooth_kern(float dist, float rad);
float smooth_kern_deriv(float dist, float rad);
float calc_dens(uint index);
float calc_pred_dens(float3 pos, float3 velocity, float prev);


[numthreads(1024, 1, 1)]
void calc_dens(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= num_particles) {
        return;
    }
    
    densities[id.x] = calc_dens(id.x);
    // if (orig) {
        //     densities[id.x] = calc_dens(particles[id.x].pos);
    //     orig = false;
    // } else {
    //     densities[id.x] = calc_pred_dens(particles[id.x].pos, particles[id.x].velocity, densities[id.x]);
    // }
}


float smooth_kern(float dist, float rad) {
    return dist < rad ? pow(rad - dist, 5) * 6.68450761 / pow(rad, 7) * smooth_scale : 0;
}


float smooth_kern_deriv(float dist, float rad) {
    return dist < rad ? pow(rad - dist, 4) * -33.422538 / pow(rad, 7) * smooth_scale : 0;
}


float calc_dens(uint index) {
    float dens = 0;
    float rad_sqr = smoothing_rad * smoothing_rad;
    int posx = (int)pred_pos[index].x / smoothing_rad;
    int posy = (int)pred_pos[index].y / smoothing_rad;
    int2 sres = int2((int)(bounds.x / smoothing_rad), (int)(bounds.y / smoothing_rad));

    for (int m = posx - 1; m < posx + 2; m++) {
        for (int n = posy - 1; n < posy + 2; n++) {
            if (m >= 0 && n >= 0 && m < sres.x && n < sres.y) {
                dens += add_dens((uint)m, (uint)n, 0, rad_sqr, index);
            }
        }
    }
    // for (uint i = 0; i < num_particles; i++) {
    //     if (i == index) {
    //         continue;
    //     }
    //     float3 diff = pred_pos[i] - pred_pos[index];
    //     float mag_sqr = diff.x * diff.x + diff.y * diff.y + diff.z * diff.z;
    //     if (mag_sqr == 0 || mag_sqr > rad_sqr) {
    //         continue;
    //     }
    //     dens += masses[i] * smooth_kern(sqrt(mag_sqr), smoothing_rad);
    // }

    return dens;
}


float add_dens(uint x, uint y, uint z, float rad_sqr, uint index) {
    uint key = hash(x, y, z, num_particles);
    float dens = 0;

    for (uint i = start_i[key]; i < num_particles && keys[i] == key; i++) {
        uint part_i = part_map[i];
        if (part_i == index) {
            continue;
        }
        float3 diff = pred_pos[part_i] - pred_pos[index];
        float mag_sqr = diff.x * diff.x + diff.y * diff.y + diff.z * diff.z;
        if (mag_sqr == 0 || mag_sqr > rad_sqr) {
            continue;
        }
        dens += masses[part_i] * smooth_kern(sqrt(mag_sqr), smoothing_rad);
    }

    return dens;
}

// float calc_pred_dens(float3 pos, float3 velocity, float prev) {
//     float converg = 0;

//     for (uint i = 0; i < num_particles; i++) {
//         float3 diff = particles[i].pos - pos;
//         float3 mag = sqrt(diff.x * diff.x + diff.y * diff.y + diff.z * diff.z);
//         float3 pred_velo_diff = particles[i].velocity - velocity;
//         converg += (diff / mag) * particles[i].mass / densities[i] * smooth_kern_deriv(mag, smoothing_rad);
//     }

//     return prev - delta_time * prev * converg;
// }
