#pragma kernel make_map
#pragma kernel ray_trace


uint3 res;
float fov;
float3 origin;
uint num_particles;
float smoothing_rad;
float3 sun;
float rad;
float3 bounds;
float step_size;
float smooth_scale;
uint refracts;
uint3 map_bounds;

RWStructuredBuffer<float3> positions;
RWStructuredBuffer<float3> velocities;
RWBuffer<float> masses;
Buffer<float> densities;
Buffer<uint> part_map;
Buffer<uint> keys;
Buffer<uint> start_i;

RWTexture3D<float> dens_map;
RWTexture2D<float4> Result;


bool check(uint x, uint y, uint z, float xpos, float ypos, float zpos, float rad_sqr, uint3 id);
uint hash(uint x, uint y, uint z, uint table_size);
uint mod(uint num, uint denom);
float calc_dens(float3 pos);
float add_dens(uint x, uint y, uint z, float rad_sqr, float3 pos);
float smooth_kern(float dist, float rad);
float smooth_kern_deriv(float dist, float rad);
float3 refract_vector(float3 start, float fract, float3 pos, float dens, float2x4 dens_cube);
float4 sample_env(float3 pos, float3 angle_vec);
float2x4 sample_dens(uint3 pos);
float get_dens(uint3 pos);
float interp_dens(float3 pos, float2x4 dens_cube);


[numthreads(8, 8, 16)]
void make_map(uint3 id : SV_DispatchThreadID) {
    if (id.x == 0 || id.y == 0 || id.z == 0) {
        dens_map[id] = 0.0;
    } else {
        dens_map[id] = calc_dens(id * step_size);
    }
}


float calc_dens(float3 pos) {
    float dens = 0;
    float rad_sqr = smoothing_rad * smoothing_rad;
    int posx = (int)pos.x / smoothing_rad;
    int posy = (int)pos.y / smoothing_rad;
    int posz = (int)pos.z / smoothing_rad;
    int3 sres = int3((int)(bounds.x / smoothing_rad), (int)(bounds.y / smoothing_rad), (int)(bounds.z / smoothing_rad));

    for (int m = posx - 1; m < posx + 2; m++) {
        for (int n = posy - 1; n < posy + 2; n++) {
            for (int b = posz - 1; b < posz + 2; b++) {
                if (m >= 0 && n >= 0 && b >= 0 && m < sres.x && n < sres.y, b < sres.z) {
                    dens += add_dens((uint)m, (uint)n, (uint)b, rad_sqr, pos);
                }
            }
        }
    }

    return dens;
}


float add_dens(uint x, uint y, uint z, float rad_sqr, float3 pos) {
    uint key = hash(x, y, z, num_particles);
    float dens = 0;

    for (uint i = start_i[key]; i < num_particles && keys[i] == key; i++) {
        uint part_i = part_map[i];
        float3 diff = positions[part_i] - pos;
        float mag_sqr = dot(diff, diff);
        if (mag_sqr == 0 || mag_sqr > rad_sqr) {
            continue;
        }
        dens += masses[part_i] * smooth_kern(sqrt(mag_sqr), smoothing_rad);
    }

    return dens;
}


float smooth_kern(float dist, float rad) {
    return dist < rad ? pow(rad - dist, 5) * 13.3690152197 / pow(rad, 8) * smooth_scale : 0;
}


[numthreads(32, 32, 1)]
void ray_trace(uint3 id : SV_DispatchThreadID) {
    // Set up the constants.
    const float rad_sqr = rad * rad;
    const float min_dens = 0.01;
    const float water_i = 1.3;
    const float air_i = 1.0;
    const float mult = 0.0001;
    const float3 lbound = float3(0.0, 0.0, 0.0);

    // Handle the camera.
    float rad_fov = radians(fov);
    float horz = sin(rad_fov) * (int)(id.x - ((res.x >> 1) + 1)) / res.x;
    float vert = sin(rad_fov * res.y / res.x) * (int)(id.y - ((res.y >> 1) + 1)) / res.y;
    float3 start = float3(horz, vert, 1.0) * rsqrt(horz * horz + vert * vert + 1);
    
    // For normal testing.
    //float3 thing = float3(-1.0, 0.0, 0.0);

    // Set up the density system.
    uint3 mapper;
    float2x4 dens_cube;
    float dens = 0.0;
    // If the camera starts inside the liquid, sample the density.
    if (!(any(step(bounds, origin)) || any(step(origin, lbound)))) {
        mapper = (uint3)(origin / step_size);
        dens_cube = sample_dens(mapper);
        dens = interp_dens(origin, dens_cube);
    }
    
    // Get an inital reading to avoid potential bugs.
    float4 env = sample_env(origin, start);
    
    // Set up loop variables.
    uint reps = (uint)(sqrt(dot(bounds, bounds)) + sqrt(dot(bounds, bounds))) / step_size;
    float blueness = 1.0;
    bool in_liquid = dens > min_dens;
    float3 enter_pos = origin;
    float3 ray_pos = origin;

    // Refraction loop.
    for (uint n = 0; n < refracts; n++) {
        uint i;
        for (i = 0; i < reps; i++) {
            // March the ray.
            ray_pos += start * step_size;
            float new_dens;
            // Check if the ray is outside of the bound.
            bool out_bounds = any(step(bounds, ray_pos)) || any(step(ray_pos, lbound));
            if (out_bounds) {
                new_dens = 0;
            } else {
                // Measure the density cube.
                mapper = (uint3)(ray_pos / step_size);
                dens_cube = sample_dens(mapper);
                new_dens = interp_dens(ray_pos, dens_cube);
            }

            if ((new_dens > min_dens) ^ in_liquid) {
                // The ray has crossed an air-water barrier.
                in_liquid = (new_dens > min_dens);
                if (in_liquid) {
                    enter_pos = ray_pos;
                } else {
                    // Decay the RG channels.
                    enter_pos -= ray_pos;
                    blueness *= exp(-dot(enter_pos, enter_pos) * mult);
                }
                //float interp_fac = (min_dens - dens) / (new_dens - dens);
                // thing = refract_vector(start, new_dens > min_dens ? air_i : water_i, new_dens > min_dens ? water_i : air_i, ray_pos - start * step_size);
                // Refract the ray.
                start = refract_vector(start, in_liquid ? air_i / water_i : water_i / air_i, ray_pos, new_dens, dens_cube);
                //Result[id.xy] = float4(new_dens, new_dens, new_dens, 1);
                break;
            }
            dens = new_dens;

            if (out_bounds && n > 0) {
                // The ray will not re-enter the fluid.
                i = reps;
                break;
            }
        }
        if (i == reps) {
            // The ray will not re-enter the fluid.
            break;
        }
    }
    // if (thing.x == -1) {
    //     Result[id.xy] = sample_env(start);
    // } else {
    //     Result[id.xy] = float4(thing, 1.0);
    // }

    // Sample the environment.
    env = sample_env(ray_pos, start);
    env.xy *= blueness;
    Result[id.xy] = env;
}


float get_dens(uint3 pos) {
    if (pos.x == map_bounds.x || pos.y == map_bounds.y || pos.z == map_bounds.z) {
        return 0;
    } else {
        return dens_map[pos];
    }
}

float2x4 sample_dens(uint3 pos) {
    return float2x4(
        get_dens(pos),
        get_dens(pos + uint3(1, 0, 0)),
        get_dens(pos + uint3(0, 0, 1)),
        get_dens(pos + uint3(1, 0, 1)),
        get_dens(pos + uint3(0, 1, 0)),
        get_dens(pos + uint3(1, 1, 0)),
        get_dens(pos + uint3(0, 1, 1)),
        get_dens(pos + uint3(1, 1, 1))
    );
}

float interp_dens(float3 pos, float2x4 dens_cube) {
    pos /= step_size;
    pos = frac(pos); 
    return  lerp(
                lerp(
                    lerp(dens_cube[0][0], dens_cube[0][1], pos.x),
                    lerp(dens_cube[0][2], dens_cube[0][3], pos.x),
                    pos.z
                ),
                lerp(
                    lerp(dens_cube[1][0], dens_cube[1][1], pos.x),
                    lerp(dens_cube[1][2], dens_cube[1][3], pos.x),
                    pos.z
                ),
                pos.y
            );
}


float3 refract_vector(float3 start, float fract, float3 pos, float dens, float2x4 dens_cube) {
    float rad_sqr = smoothing_rad * smoothing_rad;
    // int posx = (int)pos.x / smoothing_rad;
    // int posy = (int)pos.y / smoothing_rad;
    // int posz = (int)pos.z / smoothing_rad;
    // int3 sres = int3((int)(bounds.x / smoothing_rad), (int)(bounds.y / smoothing_rad), (int)(bounds.z / smoothing_rad));
    pos /= step_size;
    pos = frac(pos);
    float3 normal = float3(
        (lerp(lerp(dens_cube[0][0], dens_cube[0][2], pos.z), lerp(dens_cube[1][0], dens_cube[1][2], pos.z), pos.y) - dens) * (1 - pos.x),
        (lerp(lerp(dens_cube[0][0], dens_cube[0][2], pos.z), lerp(dens_cube[0][1], dens_cube[0][3], pos.z), pos.x) - dens) * (1 - pos.y),
        (lerp(lerp(dens_cube[0][0], dens_cube[0][1], pos.x), lerp(dens_cube[1][0], dens_cube[1][1], pos.x), pos.y) - dens) * (1 - pos.z)
    );
    // for (int m = posx - 2; m < posx + 3; m++) {
    //     for (int n = posy - 2; n < posy + 3; n++) {
    //         for (int b = posz - 2; b < posz + 3; b++) {
    //             if (m >= 0 && n >= 0 && b >= 0 && m < sres.x && n < sres.y, b < sres.z) {
    //                 uint key = hash((uint)m, (uint)n, (uint)b, num_particles);
    //                 for (uint i = start_i[key]; i < num_particles && keys[i] == key; i++) {
    //                     float3 diff = pos - positions[part_map[i]];
    //                     float mag = diff.x * diff.x + diff.y * diff.y + diff.z * diff.z;
    //                     if (mag == 0.0 || mag > rad_sqr) {
    //                         continue;
    //                     }
    //                     mag = sqrt(mag);
    //                     normal += -(diff / mag) * smooth_kern_deriv(mag, smoothing_rad * 2);
    //                 }
    //             }
    //         }
    //     }
    // }

    normal = normalize(normal);
    if (dot(normal, start) > 0) {
        normal = -normal;
    }
    //return normal;
    // return float3(dot(float3(0.0, 0.0, -1.0), normal), dot(float3(0.0, -1.0, 0.0), normal), dot(float3(-1.0, 0.0, 0.0), normal)) * 0.25 + float3(0.75, 0.75, 0.75);

    float cthing = -dot(normal, start);

    float3 rangle = fract * start + (fract * cthing - sqrt(1 - fract * fract * (1 - cthing * cthing))) * normal;
    return dot(rangle, normal) > 0 ? start : rangle;
}


float smooth_kern_deriv(float dist, float rad) {
    return dist < rad ? -pow(rad - dist, 4) / pow(rad, 8) : 0;
}


float4 sample_env(float3 pos, float3 angle_vec) {
    static const float4 ground = float4(0.5, 0.5, 0.5, 1.0);
    static const float4 zenith = float4(0.5, 0.5, 1.0, 1.0);
    static const float4 horizon = float4(0.9, 0.9, 1.0, 1.0);
    static const float4 error = float4(1.0, 0.0, 0.0, 1.0);
    static const float horizon_dist = 5000.0;
    static const float half_pi = 1.571;
    static const int ground_level = -10;

    if (dot(angle_vec, angle_vec) == 0) {
        return error;
    }
    //if (abs(angle_vec.x) < 0.01 || abs(angle_vec.y) < 0.01) return float4(1, 0, 0, 1);
    if (pos.y + angle_vec.y * horizon_dist < ground_level) {
        float dist = (ground_level - pos.y) / angle_vec.y;
        return ground;//(((int)(pos.x + dist * angle_vec.x) + (int)(pos.z + dist * angle_vec.z)) & 1) ? float4(1, 0, 0, 1.0) : float4(0, 1, 0, 1.0);
    }
    float min_angle = atan(horizon_dist / pos.y);
    float vec_angle = atan(angle_vec.y / sqrt(dot(angle_vec.xz, angle_vec.xz)));
    float interp = (half_pi + vec_angle - min_angle) / (half_pi + half_pi - min_angle);
    interp = pow(interp, 8);
    return zenith * interp + horizon * (1 - interp);
}


uint hash(uint x, uint y, uint z, uint table_size) {
    const uint xhash = 73856093;
    const uint yhash = 19349663;
    const uint zhash = 83492791;
    return mod((x * xhash) ^ (y * yhash) ^ (z * zhash), table_size);
}


uint mod(uint num, uint denom) {
    return num - ((uint)num / denom) * denom;
}