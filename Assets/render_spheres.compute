// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct Sphere {
    float3 pos;
    float rad;
};


// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
uint2 res;
float fov;
float3 origin;
uint num_spheres;
float3 light_source;

RWStructuredBuffer<Sphere> spheres;

RWTexture2D<float4> Result;


float4 sample_env(float3 angle_vec);

[numthreads(8, 8, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint max_reflects = 10;

    light_source *= rsqrt(light_source.x * light_source.x + light_source.y * light_source.y + light_source.y * light_source.y);
    Result[id.xy] = float4(1.0, 1.0, 1.0, 1.0);
    float rad_fov = radians(fov);
    float horz = sin(rad_fov) * (int)(id.x - ((res.x >> 1) + 1)) / res.x;
    float vert = sin(rad_fov * res.y / res.x) * (int)(id.y - ((res.y >> 1) + 1)) / res.y;
    float3 start = float3(horz, vert, 1.0) * rsqrt(horz * horz + vert * vert + 1);

    for (uint r = 0; r < max_reflects + 1; r++) {
        uint i = 0;
        for (; i < num_spheres; i++) {
            Sphere sphere = spheres[i];
            float3 diff = origin - sphere.pos;
            float mid = dot(diff, start);
            float discrim = mid * mid + (sphere.rad * sphere.rad - dot(diff, diff));
            if (discrim > 0) {
                float3 intersect = origin + start * -(mid + sqrt(discrim));
                if (dot(intersect - origin, start) < 0) {
                    continue;
                }
                Result[id.xy] *= float4(0.9 * float3(1.0, 1.0, 1.0), 1.0);
                origin = intersect;
                float3 normal = intersect - sphere.pos;
                normal *= rsqrt(normal.x * normal.x + normal.y * normal.y + normal.z * normal.z);
                start -= (normal + normal) * dot(start, normal);
                break;
            }
        }
        if (i == num_spheres) {
            Result[id.xy] *= sample_env(start);
            if (r > 0) {
                Result[id.xy] *= (dot(start, light_source) + 1) / 2;
            }
            break;
        }
    }
}

float4 sample_env(float3 angle_vec) {
    float4 ground = float4(0.5, 0.5, 0.5, 1.0);
    float4 zenith = float4(0.5, 0.5, 1.0, 1.0);
    float4 horizon = float4(0.9, 0.9, 1.0, 1.0);
    float horizon_dist = 5000.0;
    float half_pi = 1.571;
    
    if (origin.y + angle_vec.y * horizon_dist < 0) {
        return ground;
    }
    float neg_min_y = (float)origin.y / horizon_dist;
    float interp = 1 - (float)(angle_vec.y + neg_min_y) / (half_pi + neg_min_y);
    interp = pow(interp, 8);
    return horizon * interp + zenith * (1 - interp);
}
